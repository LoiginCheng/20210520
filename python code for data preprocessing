### Replacing missing values ###

# read excel data
workbookO21 = xlrd.open_workbook(str(path_O21))
workbookO2 = xlrd.open_workbook(str(path_O2))
workbookpred = xlrd.open_workbook(str(path_pred))
tableO21 = workbookO21.sheets()[0]
tableO2 = workbookO2.sheets()[0]
tablepred = workbookpred.sheets()[0]

feature_O21 = []
for i in range(tableO21.nrows):
    if i == 0:
        continue
    else:
        feature_O21.append(tableO21.row_values(i)[0:8])
feature_O21_npa = np.array(feature_O21)

feature_O2 = []
for i in range(tableO2.nrows):
    if i == 0:
        continue
    else:
        feature_O2.append(tableO2.row_values(i)[0:8])
feature_O2_npa = np.array(feature_O2)

target_O21 = []
for j in range(1, tableO21.nrows):
    target_O21.append(tableO21.cell_value(j, 8))
target_O21_npa = np.array(target_O21)

target_O2 = []
for j in range(1, tableO2.nrows):
    target_O2.append(tableO2.cell_value(j, 8))
target_O2_npa = np.array(target_O2)

prediction = []
for i in range(tablepred.nrows):
    if i == 0:
        continue
    else:
        prediction.append(tablepred.row_values(i)[0:8])
prediction_npa = np.array(prediction)

for i in range(0,3085,1):
    if feature_O21_npa[i,3] == -100:
        feature_O21_npa[i,3] = np.nan
    else:
        continue
for i in range(0,1233,1):
    if feature_O2_npa[i,3] == -100:
        feature_O2_npa[i,3] = np.nan
    else:
        continue

realData = Bunch(data1 = feature_O21_npa, data2 = feature_O2_npa
                 , target1 = target_O21_npa, target2 = target_O2_npa
                 , feature_names = featureNames, target_names = targetNames
                 , predfeature = prediction_npa)

# Simple imput
X_missing1 = pd.DataFrame(realData.data1)
X_missing1reg = X_missing1.copy()
sortindex1 = np.argsort(X_missing1reg.isnull().sum(axis=0)).values
df1 = X_missing1reg
fillc1 = df1.iloc[:,3]
df1_0 = pd.concat([df1.iloc[:,df1.columns != 3],pd.DataFrame(realData.target1)],axis=1)
df1_0 = np.array(df1_0)
Ytrain1 = fillc1[fillc1.notnull()]
Ytest1 = fillc1[fillc1.isnull()]
Xtrain1 = df1_0[Ytrain1.index,:]
Xtest1 = df1_0[Ytest1.index,:]
rfc1 = RandomForestRegressor(n_estimators=100)
rfc1 = rfc1.fit(Xtrain1, Ytrain1)
Ypredict1 = rfc1.predict(Xtest1)
X_missing1reg.loc[X_missing1reg.iloc[:,3].isnull(),3] = Ypredict1
X_missing1regnpa = np.array(X_missing1reg)

X_missing2 = pd.DataFrame(realData.data2)
X_missing2reg = X_missing2.copy()
sortindex2 = np.argsort(X_missing2reg.isnull().sum(axis=0)).values
df2 = X_missing2reg
fillc2 = df2.iloc[:,3]
df2_0 = pd.concat([df2.iloc[:,df2.columns != 3],pd.DataFrame(realData.target2)],axis=1)
df2_0 = np.array(df2_0)
Ytrain2 = fillc2[fillc2.notnull()]
Ytest2 = fillc2[fillc2.isnull()]
Xtrain2 = df2_0[Ytrain2.index,:]
Xtest2 = df2_0[Ytest2.index,:]
rfc2 = RandomForestRegressor(n_estimators=100)
rfc2 = rfc2.fit(Xtrain2, Ytrain2)
Ypredict2 = rfc2.predict(Xtest2)
X_missing2reg.loc[X_missing2reg.iloc[:,3].isnull(),3] = Ypredict2
X_missing2regnpa = np.array(X_missing2reg)

realData_reg = Bunch(data1 = X_missing1regnpa, data2 = X_missing2regnpa
                     , target1 = target_O21_npa, target2 = target_O2_npa
                     , feature_names = featureNames, target_names = targetNames
                     , predfeature = prediction_npa)
